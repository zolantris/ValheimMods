<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <PreferredToolArchitecture>true</PreferredToolArchitecture>
        <AssemblyName>$(ProjectName)</AssemblyName>
        <RootNamespace>$(ProjectName)</RootNamespace>
        <TargetFramework>netstandard2.0</TargetFramework>
        <TargetFrameworkVersion>v4.8</TargetFrameworkVersion>
        <Platforms>AnyCPU</Platforms>
        <PlatformTarget>AnyCPU</PlatformTarget>
    </PropertyGroup>
    <Import Project="$(SolutionDir).props" Condition="Exists('$(SolutionDir).props')"/>
    <PropertyGroup Label="Runnables and Project Booleans">
        <!-- Runnable variants execute Valheim server or client process after building -->
        <IsRunnableDebug Condition="'$(Configuration)' == 'Debug Run Client' or '$(Configuration)' == 'Debug Run Server' or '$(Configuration)' == 'Debug Run ClientServer'">true</IsRunnableDebug>
        <IsRunnableRelease Condition="'$(Configuration)' == 'Release Run Client' or '$(Configuration)' == 'Release Run Server' or '$(Configuration)' == 'Release Run ClientServer'">true</IsRunnableRelease>
        <IsRunnableClientServer Condition="'$(Configuration)' == 'Release Run ClientServer' or '$(Configuration)' == 'Debug Run ClientServer'">true</IsRunnableClientServer>
        <IsRunnableServer Condition="'$(Configuration)' == 'Release Run Server' or '$(Configuration)' == 'Debug Run Server'">true</IsRunnableServer>
        <IsRunnableClient Condition="'$(IsRunnableRelease)' == 'true' or '$(IsRunnableDebug)' == 'true'">true</IsRunnableClient>
        <IsRunnable Condition="'$(IsRunnableRelease)' == 'true' or '$(IsRunnableDebug)' == 'true'">true</IsRunnable>
        <!--        <IsRunnable Condition="'$(Configuration)' == 'Debug Run Client' or-->
        <!--                          '$(Configuration)' == 'Debug Run Server' or-->
        <!--                          '$(Configuration)' == 'Debug Run ClientServer' or-->
        <!--                          '$(Configuration)' == 'Release Run Client' or-->
        <!--                          '$(Configuration)' == 'Release Run Server' or-->
        <!--                          '$(Configuration)' == 'Release Run ClientServer'">true-->
        <!--        </IsRunnable>-->
        <IsRunnable>true</IsRunnable>
        <!--        <IsRunnable Condition="'$(IsRunnable)' != 'true'">false</IsRunnable>-->
        <IsDebug Condition="'$(Configuration)' == 'Debug' or '$(IsRunnableDebug)' == 'true'">true</IsDebug>
        <IsRelease Condition="'$(Configuration)' == 'Release' or '$(IsRunnableRelease)' == 'true'">true</IsRelease>
        <IsNotArchive Condition="'$(Configuration)' != 'Release Archive' and '$(Configuration)' != 'ReleaseBETA Archive'">true</IsNotArchive>
    </PropertyGroup>
    <PropertyGroup Condition="'$(IsDebug)' == 'true'">
        <PlatformTarget>AnyCPU</PlatformTarget>
        <DebugSymbols>true</DebugSymbols>
        <DebugType>full</DebugType>
        <Optimize>false</Optimize>
        <OutputPath>bin\Debug\</OutputPath>
        <DefineConstants>DEBUG;TRACE</DefineConstants>
        <ErrorReport>prompt</ErrorReport>
        <WarningLevel>4</WarningLevel>
        <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    </PropertyGroup>
    <PropertyGroup Condition="'$(IsRelease)' == 'true' or '$(Configuration)' == 'Release Archive' or '$(Configuration)' == 'ReleaseBETA Archive'">
        <PlatformTarget>AnyCPU</PlatformTarget>
        <DebugType>pdbonly</DebugType>
        <Optimize>true</Optimize>
        <OutputPath>bin\Release\</OutputPath>
        <DefineConstants>TRACE</DefineConstants>
        <ErrorReport>prompt</ErrorReport>
        <WarningLevel>4</WarningLevel>
        <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    </PropertyGroup>
    <PropertyGroup Condition="!Exists('$(SolutionDir).props')">
        <BepInExPath>$(SolutionDir)libs</BepInExPath>
        <ManagedDataPath>$(SolutionDir)libs</ManagedDataPath>
    </PropertyGroup>

    <PropertyGroup Label="VM properties">
        <SandboxieVMExists Condition="Exists('$(SandboxiePluginDeployPath)')">true</SandboxieVMExists>
    </PropertyGroup>

    <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Test|AnyCPU' ">
        <OutputPath>bin\Test\</OutputPath>
    </PropertyGroup>

    <!--  disables cache which can prevent building or running stuff  -->
    <PropertyGroup>
        <DisableFastUpToDateCheck>True</DisableFastUpToDateCheck>
    </PropertyGroup>

    <!--  Required for vehicle serialization/storage  -->
    <ItemGroup>
        <Reference Include="Newtonsoft.Json" Version="13.0.3">
            <HintPath>$(SolutionDir)\Dependencies\Newtonsoft.Json.dll</HintPath>
        </Reference>
    </ItemGroup>

    <ItemGroup>
        <!--   Required for structlinq to work     -->
        <Reference Include="System.Collections.Immutable" Version="5.0.0">
            <HintPath>$(SolutionDir)\Dependencies\System.Collections.Immutable.dll</HintPath>
        </Reference>
    </ItemGroup>

    <!-- Required for O(n) performant Linq like readable loops -->
    <ItemGroup>
        <Reference Include="StructLinq" Version="0.28.2">
            <HintPath>$(SolutionDir)\Dependencies\StructLinq.dll</HintPath>
        </Reference>
    </ItemGroup>

    <!-- Required for vehicle syncing (lots of players not using bepinex config manager)   -->
    <ItemGroup>
        <Reference Include="ServerSync" Version="1.19.0">
            <HintPath>$(SolutionDir)\Dependencies\ServerSync.dll</HintPath>
        </Reference>
    </ItemGroup>

    <!-- Automatic publicize game libs -->
    <ItemGroup>
        <PackageReference Include="Krafs.Publicizer" Version="2.2.1">
            <PrivateAssets>all</PrivateAssets>
            <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
        </PackageReference>
    </ItemGroup>
    <PropertyGroup>
        <PublicizerClearCacheOnClean>true</PublicizerClearCacheOnClean>
        <PublicizerLogFilePath>.\Logs\publicizer.txt</PublicizerLogFilePath>
    </PropertyGroup>

    <!-- Add BepInEx references -->
    <ItemGroup Label="BepInEx">
        <Reference Include="0Harmony">
            <SpecificVersion>False</SpecificVersion>
            <HintPath>$(BepInExPath)\0Harmony.dll</HintPath>
            <Private>False</Private>
        </Reference>
        <Reference Include="BepInEx">
            <SpecificVersion>False</SpecificVersion>
            <HintPath>$(BepInExPath)\BepInEx.dll</HintPath>
            <Private>False</Private>
        </Reference>
    </ItemGroup>

    <!-- Add valheim_data references -->
    <ItemGroup Label="Valheim_Data">
        <Publicize Include="assembly_valheim"/>
        <Reference Include="assembly_valheim">
            <SpecificVersion>False</SpecificVersion>
            <HintPath>$(ManagedDataPath)\assembly_valheim.dll</HintPath>
            <Private>False</Private>
        </Reference>
        <Reference Include="SPlatform">
            <SpecificVersion>False</SpecificVersion>
            <HintPath>$(ManagedDataPath)\SPlatform.dll</HintPath>
            <Private>False</Private>
        </Reference>
        <Reference Include="SPlatform.Steam">
            <SpecificVersion>False</SpecificVersion>
            <HintPath>$(ManagedDataPath)\SPlatform.Steam.dll</HintPath>
            <Private>False</Private>
        </Reference>
        <Reference Include="assembly_googleanalytics">
            <SpecificVersion>False</SpecificVersion>
            <HintPath>$(ManagedDataPath)\assembly_googleanalytics.dll</HintPath>
            <Private>False</Private>
        </Reference>
        <Reference Include="assembly_guiutils">
            <SpecificVersion>False</SpecificVersion>
            <HintPath>$(ManagedDataPath)\assembly_guiutils.dll</HintPath>
            <Private>False</Private>
        </Reference>
        <Reference Include="ui_lib">
            <SpecificVersion>False</SpecificVersion>
            <HintPath>$(ManagedDataPath)\ui_lib.dll</HintPath>
            <Private>False</Private>
        </Reference>
        <Reference Include="assembly_postprocessing">
            <SpecificVersion>False</SpecificVersion>
            <HintPath>$(ManagedDataPath)\assembly_postprocessing.dll</HintPath>
            <Private>False</Private>
        </Reference>
        <Reference Include="assembly_steamworks">
            <SpecificVersion>False</SpecificVersion>
            <HintPath>$(ManagedDataPath)\assembly_steamworks.dll</HintPath>
            <Private>False</Private>
        </Reference>
        <Reference Include="assembly_sunshafts">
            <SpecificVersion>False</SpecificVersion>
            <HintPath>$(ManagedDataPath)\assembly_sunshafts.dll</HintPath>
            <Private>False</Private>
        </Reference>
        <Reference Include="assembly_utils">
            <SpecificVersion>False</SpecificVersion>
            <HintPath>$(ManagedDataPath)\assembly_utils.dll</HintPath>
            <Private>False</Private>
        </Reference>
    </ItemGroup>

    <ItemGroup Label="Csharp-Libs">
        <Reference Include="System"/>
        <Reference Include="System.Core"/>
    </ItemGroup>

    <!-- Add Unity references -->
    <ItemGroup Label="Unity">
        <Reference Include="UnityEngine">
            <SpecificVersion>False</SpecificVersion>
            <HintPath>$(ManagedDataPath)\UnityEngine.dll</HintPath>
            <Private>False</Private>
        </Reference>
        <Reference Include="UnityEngine.AccessibilityModule">
            <SpecificVersion>False</SpecificVersion>
            <HintPath>$(ManagedDataPath)\UnityEngine.AccessibilityModule.dll</HintPath>
            <Private>False</Private>
        </Reference>
        <Reference Include="UnityEngine.AIModule">
            <SpecificVersion>False</SpecificVersion>
            <HintPath>$(ManagedDataPath)\UnityEngine.AIModule.dll</HintPath>
            <Private>False</Private>
        </Reference>
        <Reference Include="UnityEngine.AnimationModule">
            <SpecificVersion>False</SpecificVersion>
            <HintPath>$(ManagedDataPath)\UnityEngine.AnimationModule.dll</HintPath>
            <Private>False</Private>
        </Reference>
        <Reference Include="UnityEngine.AudioModule">
            <SpecificVersion>False</SpecificVersion>
            <HintPath>$(ManagedDataPath)\UnityEngine.AudioModule.dll</HintPath>
            <Private>False</Private>
        </Reference>
        <Reference Include="UnityEngine.ClothModule">
            <SpecificVersion>False</SpecificVersion>
            <HintPath>$(ManagedDataPath)\UnityEngine.ClothModule.dll</HintPath>
            <Private>False</Private>
        </Reference>
        <Reference Include="UnityEngine.CoreModule">
            <SpecificVersion>False</SpecificVersion>
            <HintPath>$(ManagedDataPath)\UnityEngine.CoreModule.dll</HintPath>
            <Private>False</Private>
        </Reference>
        <Reference Include="UnityEngine.InputLegacyModule">
            <SpecificVersion>False</SpecificVersion>
            <HintPath>$(ManagedDataPath)\UnityEngine.InputLegacyModule.dll</HintPath>
            <Private>False</Private>
        </Reference>
        <Reference Include="UnityEngine.ParticleSystemModule">
            <SpecificVersion>False</SpecificVersion>
            <HintPath>$(ManagedDataPath)\UnityEngine.ParticleSystemModule.dll</HintPath>
            <Private>False</Private>
        </Reference>
        <Reference Include="UnityEngine.PhysicsModule">
            <SpecificVersion>False</SpecificVersion>
            <HintPath>$(ManagedDataPath)\UnityEngine.PhysicsModule.dll</HintPath>
            <Private>False</Private>
        </Reference>
        <Reference Include="UnityEngine.ScreenCaptureModule">
            <SpecificVersion>False</SpecificVersion>
            <HintPath>$(ManagedDataPath)\UnityEngine.ScreenCaptureModule.dll</HintPath>
            <Private>False</Private>
        </Reference>
        <Reference Include="Unity.TextMeshPro">
            <SpecificVersion>False</SpecificVersion>
            <HintPath>$(ManagedDataPath)\Unity.TextMeshPro.dll</HintPath>
            <Private>False</Private>
        </Reference>
        <Reference Include="Unity.VehiclesModule">
            <SpecificVersion>False</SpecificVersion>
            <HintPath>$(ManagedDataPath)\UnityEngine.VehiclesModule.dll</HintPath>
            <Private>False</Private>
        </Reference>
        <Reference Include="UnityEngine.UI">
            <SpecificVersion>False</SpecificVersion>
            <HintPath>$(ManagedDataPath)\UnityEngine.UI.dll</HintPath>
            <Private>False</Private>
        </Reference>
        <Reference Include="UnityEngine.UIModule">
            <SpecificVersion>False</SpecificVersion>
            <HintPath>$(ManagedDataPath)\UnityEngine.UIModule.dll</HintPath>
            <Private>False</Private>
        </Reference>
        <Reference Include="UnityEngine.UIElementsModule">
            <SpecificVersion>False</SpecificVersion>
            <HintPath>$(ManagedDataPath)\UnityEngine.UIElementsModule.dll</HintPath>
            <Private>False</Private>
        </Reference>
        <Reference Include="UnityEngine.InputModule">
            <SpecificVersion>False</SpecificVersion>
            <HintPath>$(ManagedDataPath)\UnityEngine.InputModule.dll</HintPath>
            <Private>False</Private>
        </Reference>
        <Reference Include="UnityEngine.JSONSerializeModule">
            <SpecificVersion>False</SpecificVersion>
            <HintPath>$(ManagedDataPath)\UnityEngine.JSONSerializeModule.dll</HintPath>
            <Private>False</Private>
        </Reference>
        <Reference Include="UnityEngine.IMGUIModule">
            <SpecificVersion>False</SpecificVersion>
            <HintPath>$(ManagedDataPath)\UnityEngine.IMGUIModule.dll</HintPath>
            <Private>False</Private>
        </Reference>
        <Reference Include="UnityEngine.ImageConversionModule">
            <SpecificVersion>False</SpecificVersion>
            <HintPath>$(ManagedDataPath)\UnityEngine.ImageConversionModule.dll</HintPath>
            <Private>False</Private>
        </Reference>
        <Reference Include="UnityEngine.TerrainModule">
            <SpecificVersion>False</SpecificVersion>
            <HintPath>$(ManagedDataPath)\UnityEngine.TerrainModule.dll</HintPath>
            <Private>False</Private>
        </Reference>
        <!--        <Reference Include="UnityEngine.TextCoreModule">-->
        <!--            <SpecificVersion>False</SpecificVersion>-->
        <!--            <HintPath>$(ManagedDataPath)\UnityEngine.TextCoreModule.dll</HintPath>-->
        <!--            <Private>False</Private>-->
        <!--        </Reference>-->
        <Reference Include="UnityEngine.TextRenderingModule">
            <SpecificVersion>False</SpecificVersion>
            <HintPath>$(ManagedDataPath)\UnityEngine.TextRenderingModule.dll</HintPath>
            <Private>False</Private>
        </Reference>
        <Reference Include="UnityEngine.UnityWebRequestAudioModule">
            <SpecificVersion>False</SpecificVersion>
            <HintPath>$(ManagedDataPath)\UnityEngine.UnityWebRequestAudioModule.dll</HintPath>
            <Private>False</Private>
        </Reference>
        <Reference Include="UnityEngine.UnityWebRequestModule">
            <SpecificVersion>False</SpecificVersion>
            <HintPath>$(ManagedDataPath)\UnityEngine.UnityWebRequestModule.dll</HintPath>
            <Private>False</Private>
        </Reference>
        <Reference Include="UnityEngine.UnityWebRequestWWWModule">
            <SpecificVersion>False</SpecificVersion>
            <HintPath>$(ManagedDataPath)\UnityEngine.UnityWebRequestWWWModule.dll</HintPath>
            <Private>False</Private>
        </Reference>
        <Reference Include="UnityEngine.UnityWebRequestTextureModule">
            <SpecificVersion>False</SpecificVersion>
            <HintPath>$(ManagedDataPath)\UnityEngine.UnityWebRequestTextureModule.dll</HintPath>
            <Private>False</Private>
        </Reference>
        <Reference Include="UnityEngine.AssetBundleModule">
            <SpecificVersion>False</SpecificVersion>
            <HintPath>$(ManagedDataPath)\UnityEngine.AssetBundleModule.dll</HintPath>
            <Private>False</Private>
        </Reference>
    </ItemGroup>

    <ItemGroup Label="required-mods">
        <Reference Include="Jotunn">
            <SpecificVersion>False</SpecificVersion>
            <HintPath>$(SolutionDir)\libs\Jotunn.dll</HintPath>
            <Private>False</Private>
        </Reference>
    </ItemGroup>

    <!-- Patches for community mods -->
    <!-- Todo this may be moved direcly into repos that require this mod -->
    <ItemGroup Label="Community Mod Patches">
        <Publicize Include="PlanBuild"/>
        <Reference Include="PlanBuild">
            <SpecificVersion>False</SpecificVersion>
            <HintPath>$(SolutionDir)\libs\PlanBuild.dll</HintPath>
            <Private>False</Private>
        </Reference>
        <Publicize Include="Advize_PlantEasily"/>
        <Reference Include="Advize_PlantEasily">
            <SpecificVersion>False</SpecificVersion>
            <HintPath>$(SolutionDir)\libs\Advize_PlantEasily.dll</HintPath>
            <Private>False</Private>
        </Reference>
        <Publicize Include="ComfyGizmo"/>
        <Reference Include="ComfyGizmo">
            <SpecificVersion>False</SpecificVersion>
            <HintPath>$(SolutionDir)\libs\ComfyGizmo.dll</HintPath>
            <Private>False</Private>
        </Reference>
    </ItemGroup>

    <!--  Metrics  -->
    <ItemGroup Condition="$(AssemblyName) == 'ValheimRAFT'">
        <Reference Include="SentryUnityWrapper">
            <HintPath>$(SolutionDir)\src\SentryUnityWrapper\bin\Debug\SentryUnityWrapper.dll</HintPath>
            <Private>False</Private>
        </Reference>
    </ItemGroup>
    <PropertyGroup>
        <AssetsDir>$(SolutionDir)src\ValheimRAFT\Assets\</AssetsDir>
    </PropertyGroup>

    <PropertyGroup Label="FileLockValidation">

        <ServerFileToValidate>$(ValheimServerPath)\$(PluginDeployTarget)\$(AssemblyName).dll</ServerFileToValidate>
        <ServerFileExitCode>1</ServerFileExitCode>

        <ClientFileToValidate>$(PluginDeployPath)\$(AssemblyName)\$(AssemblyName).dll</ClientFileToValidate>
        <ClientFileExitCode>1</ClientFileExitCode>

        <SandBoxieFileToValidate>$(SandboxiePluginDeployPath)\$(AssemblyName).dll</SandBoxieFileToValidate>
        <SandBoxieFileExitCode>1</SandBoxieFileExitCode>

        <PowerShellScript>$(SolutionDir)CheckFilesLocked.ps1</PowerShellScript>
    </PropertyGroup>

    <Target Name="file_lock_check" BeforeTargets="PostBuildEvent">
        <Message Text="Checking if files are locked...in distinations" Importance="high"/>
        <Exec Command="powershell -ExecutionPolicy Bypass -File &quot;$(PowerShellScript)&quot; &quot;$(ClientFileToValidate)&quot;"
              IgnoreExitCode="true">
            <Output TaskParameter="ExitCode" PropertyName="ClientFileExitCode"/>
        </Exec>
        <Exec Command="powershell -ExecutionPolicy Bypass -File &quot;$(PowerShellScript)&quot; &quot;$(ServerFileToValidate)&quot;"
              IgnoreExitCode="true">
            <Output TaskParameter="ExitCode" PropertyName="ServerFileExitCode"/>
        </Exec>
        <Exec Command="powershell -ExecutionPolicy Bypass -File &quot;$(PowerShellScript)&quot; &quot;$(SandBoxieFileToValidate)&quot;"
              IgnoreExitCode="true">
            <Output TaskParameter="ExitCode" PropertyName="SandBoxieFileExitCode"/>
        </Exec>
        <Message Text="Results: ServerFileExitCode: $(ServerFileExitCode), ClientFileExitCode: $(ClientFileExitCode), SandBoxieFileExitCode: $(SandBoxieFileExitCode)," Importance="high"/>
    </Target>

    <Target Name="convert_pdb_to_mdb" AfterTargets="file_lock_check">
        <!--  Copy/convert commands are top level  -->
        <Exec Command="$(SolutionDir)pdb2mdb.exe $(TargetPath)"/>
        <!--   Renames the dll.mdb to just mdb     -->
        <Move SourceFiles="$(OutDir)$(AssemblyName).dll.mdb" DestinationFiles="$(OutDir)$(AssemblyName).mdb"/>
    </Target>

    <!--     and $(IsRunnableClientServer) == 'true' or '$(IsRunnableServer)' == 'true'-->
    <Target Name="copy_to_valheim_server" AfterTargets="convert_pdb_to_mdb" KeepDuplicateOutputs="false" Condition="'$(IsRunnable)' == 'true' and $(AssemblyName) != 'SentryUnityWrapper' and '$(ServerFileExitCode)' == '0'">
        <ItemGroup>
            <CheckValheimServerPath Include="$(ValheimServerPath)"/>
        </ItemGroup>
        <Error Condition="!Exists('@(CheckValheimServerPath)')"/>

        <MakeDir Directories="$(ValheimServerPath)\$(PluginDeployTarget)"/>
        <Exec Command="xcopy &quot;$(SolutionDir)Dependencies&quot; &quot;$(ValheimServerPath)\$(PluginDeployTarget)&quot; /q /s /y /i"/>

        <Exec Command="copy &quot;$(OutDir)$(AssemblyName).dll&quot; &quot;$(ValheimServerPath)\$(PluginDeployTarget)\$(AssemblyName).dll&quot;"/>
        <Exec Command="copy &quot;$(OutDir)$(AssemblyName).pdb&quot; &quot;$(ValheimServerPath)\$(PluginDeployTarget)\$(AssemblyName).pdb&quot;"/>
        <Exec Command="copy &quot;$(OutDir)$(AssemblyName).mdb&quot; &quot;$(ValheimServerPath)\$(PluginDeployTarget)\$(AssemblyName).mdb&quot;"/>

        <!--        <Exec Command="xcopy &quot;$(TargetDir)&quot; &quot;$(ValheimServerPath)\$(PluginDeployTarget)\&quot; /q /s /y /i"/>-->

        <!--        <Exec Condition="Exists('$(AssetsDir)')" Command="xcopy /d &quot;$(AssetsDir)&quot; &quot;$(ValheimServerPath)\$(PluginDeployTarget)\Assets\&quot; /E/H/Y"/>-->
        <!--        <Exec Condition="Exists('$(AssetsDir)Translations\English\')" Command="xcopy /d &quot;$(AssetsDir)Translations\English\&quot; &quot;$(ValheimServerPath)\$(PluginDeployTarget)\Assets\Translations\English\&quot; /E/H/Y"/>-->
    </Target>
    <ItemGroup>
        <DependencyLibs Include="$(SolutionDir)Dependencies\**\*.*"/>
    </ItemGroup>
    <Target Name="CopyDependencyLibsToR2ModMan" AfterTargets="Build">
        <Message Text="Copying dependency libs from $(SolutionDir)Dependencies to $(PluginDeployPath)..." Importance="high"/>
        <Copy
                SourceFiles="@(DependencyLibs)"
                DestinationFolder="$(PluginDeployPath)\%(RecursiveDir)"
                SkipUnchangedFiles="true"/>
    </Target>
    <Target Name="Copy_To_R2ModMan" AfterTargets="convert_pdb_to_mdb" Condition="'$(IsRunnable)' == 'true' and '$(IsNotArchive)' == 'true' and '$(IsRunnableServer)' != 'true' and '$(ClientFileExitCode)' == '0'">
        <!--  Eventually we need to copy and test this lib over in unity     -->
        <!--        <Exec Condition="'$(IsRelease)' == 'true'" Command="copy &quot;$(OutDir)$(AssemblyName).dll&quot; &quot;$(SolutionDir)src\ValheimRAFT\ValheimRAFT.Unity\Assets\Assemblies\$(AssemblyName).dll&quot;"/>-->

        <!--    required plugins  -->
        <!--        <Exec Command="xcopy &quot;$(SolutionDir)Dependencies&quot; &quot;$(PluginDeployPath)\&quot; /q /s /y /i"/>-->

        <Exec Command="copy &quot;$(OutDir)$(AssemblyName).dll&quot; &quot;$(PluginDeployPath)\$(AssemblyName).dll&quot;"/>
        <Exec Command="copy &quot;$(OutDir)$(AssemblyName).pdb&quot; &quot;$(PluginDeployPath)\$(AssemblyName).pdb&quot;"/>
        <Exec Command="copy &quot;$(OutDir)$(AssemblyName).mdb&quot; &quot;$(PluginDeployPath)\$(AssemblyName).mdb&quot;"/>

        <Exec Condition="$(AssemblyName) == 'SentryUnityWrapper'" Command="xcopy &quot;$(SolutionDir)\SentryUnity\1.8.0\runtime&quot; &quot;$(PluginDeployPath)\&quot; /q /s /y /i"/>
        <!--        <Exec Command="xcopy &quot;$(TargetDir)&quot; &quot;$(PluginDeployPath)\&quot; /q /s /y /i"/>-->

        <Exec Condition="Exists('$(AssetsDir)')" Command="xcopy /d &quot;$(AssetsDir)&quot; &quot;$(PluginDeployPath)\Assets\&quot; /E/H/Y"/>
        <Exec Condition="Exists('$(AssetsDir)Translations\English\')" Command="xcopy /d &quot;$(AssetsDir)Translations\English\&quot; &quot;$(PluginDeployPath)\Assets\Translations\English\&quot; /E/H/Y"/>
    </Target>
    <!--     Condition=" $(AssemblyName) == 'ValheimRAFT' And Exists('$(SandboxiePluginDeployPath)') And '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' "-->
    <Target Name="Copy_To_R2ModMan_vm" AfterTargets="Copy_To_R2ModMan" Condition="'$(IsRunnable)' == 'true' and '$(SandBoxieFileExitCode)' == '0'">
        <!--   Will only run if the above passes     -->
        <Copy
                SourceFiles="@(DependencyLibs)"
                DestinationFolder="$(SandboxiePluginDeployPath)\%(RecursiveDir)"
                SkipUnchangedFiles="true"/>

        <Exec Condition="Exists('$(OutDir)$(AssemblyName).dll')" Command="copy &quot;$(OutDir)$(AssemblyName).dll&quot; &quot;$(SandboxiePluginDeployPath)\$(AssemblyName).dll&quot;"/>
        <Exec Condition="Exists('$(OutDir)$(AssemblyName).pdb')" Command="copy &quot;$(OutDir)$(AssemblyName).pdb&quot; &quot;$(SandboxiePluginDeployPath)\$(AssemblyName).pdb&quot;"/>
        <Exec Condition="Exists('$(OutDir)$(AssemblyName).mdb')" Command="copy &quot;$(OutDir)$(AssemblyName).mdb&quot; &quot;$(SandboxiePluginDeployPath)\$(AssemblyName).mdb&quot;"/>

        <!--        <Exec Condition="$(AssemblyName) == 'SentryUnityWrapper'" Command="xcopy &quot;$(SolutionDir)\SentryUnity\1.8.0\runtime&quot; &quot;$(SandboxiePluginDeployPath)\&quot; /q /s /y /i"/>-->
        <!--        <Exec Condition="'$(FilesCheckExitCode)' == '0'" Command="xcopy &quot;$(TargetDir)&quot; &quot;$(SandboxiePluginDeployPath)\&quot; /q /s /y /i"/>-->

        <Exec Condition="Exists('$(AssetsDir)')" Command="xcopy /d &quot;$(AssetsDir)&quot; &quot;$(SandboxiePluginDeployPath)\Assets\&quot; /E/H/Y"/>
        <Exec Condition="Exists('$(AssetsDir)Translations\English\')" Command="xcopy /d &quot;$(AssetsDir)Translations\English\&quot; &quot;$(SandboxiePluginDeployPath)\Assets\Translations\English\&quot; /E/H/Y"/>
    </Target>
    <Target Name="Generate_Mod_Archive" AfterTargets="PostBuildEvent" Condition=" '$(Configuration)|$(Platform)' == 'Release Archive|AnyCPU' ">
        <PropertyGroup>
            <RepoDir>$(SolutionDir)src\ValheimRAFT\</RepoDir>
            <ModOutputDir>$(OutDir)..\ModVersions\</ModOutputDir>
            <TmpDir>$(OutDir)..\tmp\</TmpDir>
            <ThunderStoreDir>$(RepoDir)ThunderStore\</ThunderStoreDir>
            <ThunderStoreName>Thunderstore</ThunderStoreName>
            <NexusName>Nexus</NexusName>
            <ModNameVersion>$(AssemblyName)-$(ApplicationVersion).zip</ModNameVersion>
            <AutoDocName>$(AssemblyName)_AutoDoc.md</AutoDocName>
            <AutoDocPath>$(PluginDeployPath)/$(AutoDocName)</AutoDocPath>
            <LocalAutoDocPath>$(SolutionDir)src\$(AssemblyName)\docs\$(AutoDocName)</LocalAutoDocPath>
        </PropertyGroup>
        <Exec Command="if exist &quot;$(TmpDir)plugins\Assets&quot; rd /s /q &quot;$(TmpDir)plugins\Assets&quot;"/>
        <Exec Command="if exist &quot;$(TmpDir)&quot; rd /s /q &quot;$(TmpDir)&quot;"/>

        <Exec Command="if not exist &quot;$(ModOutputDir)&quot; mkdir &quot;$(ModOutputDir)&quot;"/>
        <Exec Command="if not exist &quot;$(TmpDir)&quot; mkdir &quot;$(TmpDir)&quot;"/>
        <Exec Command="if not exist &quot;$(TmpDir)plugins&quot; mkdir &quot;$(TmpDir)plugins&quot;"/>
        <Exec Command="if not exist &quot;$(TmpDir)$(AssemblyName)&quot; mkdir &quot;$(TmpDir)$(AssemblyName)&quot;"/>

        <Exec Command="xcopy &quot;$(SolutionDir)plugins&quot; &quot;$(TmpDir)plugins&quot; /q /s /y /i"/>

        <Exec Command="copy &quot;$(OutDir)$(AssemblyName).dll&quot; &quot;$(TmpDir)plugins\$(AssemblyName).dll&quot;"/>
        <Exec Command="copy &quot;$(OutDir)$(AssemblyName).pdb&quot; &quot;$(TmpDir)plugins\$(AssemblyName).pdb&quot;"/>
        <Exec Command="copy &quot;$(RepoDir)README.md&quot; &quot;$(TmpDir)README.md&quot;"/>

        <!-- Overrites the auto-doc -->
        <Copy Condition="Exists('$(AutoDocPath)') and Exists('$(LocalAutoDocPath)')" SourceFiles="$(AutoDocPath)" DestinationFolder="$(SolutionDir)src\$(AssemblyName)\docs\"/>

        <!-- Copy Assets -->
        <Exec Command="if exist &quot;$(AssetsDir)&quot; xcopy /d &quot;$(AssetsDir)&quot; &quot;$(TmpDir)plugins\Assets\&quot; /E/H"/>
        <Exec Command="if exist $&quot;$(AssetsDir)&quot; del &quot;$(TmpDir)plugins\Assets\*.png.meta&quot;"/>

        <!--   copy all files from outputdir, anything included is something that does not exist in the base game dependencies...this copies too many things, including dev only deps fyi. dont use it for production     -->
        <Exec Command="xcopy &quot;$(TargetDir)&quot; &quot;$(TmpDir)plugins\&quot; /q /s /y /i"/>

        <Exec Command="xcopy /d &quot;$(ThunderStoreDir)&quot; &quot;$(TmpDir)&quot; /E/H"/>
        <!-- delete duplicate mod version-->
        <Exec Command="if exist &quot;$(ModOutputDir)$(ThunderStoreName)-$(ModNameVersion)&quot; del /s /q &quot;$(ModOutputDir)$(ThunderStoreName)-$(ModNameVersion)&quot;"/>
        <Exec Command="if exist &quot;$(ModOutputDir)$(NexusName)-$(ModNameVersion)&quot; del /s /q &quot;$(ModOutputDir)$(NexusName)-$(ModNameVersion)&quot;"/>
        <Exec Command="if exist &quot;$(ModOutputDir)libs-$(ApplicationVersion).zip&quot; del /s /q &quot;$(ModOutputDir)libs-$(ApplicationVersion).zip&quot;"/>

        <Exec Command="powershell Compress-Archive '$(TmpDir)\*' '$(ModOutputDir)$(ThunderStoreName)-$(ModNameVersion)'"/>

        <!--  For modNexus there needs to be a folder with the modname     -->
        <Exec Command="xcopy /d &quot;$(TmpDir)plugins&quot; &quot;$(TmpDir)$(AssemblyName)&quot; /E/H"/>
        <Exec Command="powershell Compress-Archive '$(TmpDir)$(AssemblyName)' '$(ModOutputDir)$(NexusName)-$(ModNameVersion)'"/>
        <Exec Command="powershell Compress-Archive '$(SolutionDir)libs\*' '$(ModOutputDir)libs-$(ApplicationVersion).zip'"/>
    </Target>
    <Target Name="Generate_Mod_ArchiveBeta" AfterTargets="PostBuildEvent" Condition=" '$(Configuration)|$(Platform)' == 'ReleaseBETA Archive|AnyCPU' ">
        <PropertyGroup>
            <RepoDir>$(SolutionDir)src\ValheimRAFT\</RepoDir>
            <ModOutputDir>$(OutDir)..\ModVersions\</ModOutputDir>
            <TmpDir>$(OutDir)..\tmp\</TmpDir>
            <ThunderStoreDir>$(RepoDir)ThunderStoreBeta\</ThunderStoreDir>
            <ThunderStoreName>Thunderstore</ThunderStoreName>
            <NexusName>Nexus</NexusName>
            <ModNameVersion>$(AssemblyName)-$(ApplicationVersion)-beta.zip</ModNameVersion>
            <AutoDocName>$(AssemblyName)_AutoDoc.md</AutoDocName>
            <AutoDocPath>$(PluginDeployPath)/$(AutoDocName)</AutoDocPath>
            <LocalAutoDocPath>$(SolutionDir)src\$(AssemblyName)\docs\$(AutoDocName)</LocalAutoDocPath>
        </PropertyGroup>
        <Exec Command="if exist &quot;$(TmpDir)plugins\Assets&quot; rd /s /q &quot;$(TmpDir)plugins\Assets&quot;"/>
        <Exec Command="if exist &quot;$(TmpDir)&quot; rd /s /q &quot;$(TmpDir)&quot;"/>

        <Exec Command="if not exist &quot;$(ModOutputDir)&quot; mkdir &quot;$(ModOutputDir)&quot;"/>
        <Exec Command="if not exist &quot;$(TmpDir)&quot; mkdir &quot;$(TmpDir)&quot;"/>
        <Exec Command="if not exist &quot;$(TmpDir)plugins&quot; mkdir &quot;$(TmpDir)plugins&quot;"/>
        <Exec Command="if not exist &quot;$(TmpDir)$(AssemblyName)&quot; mkdir &quot;$(TmpDir)$(AssemblyName)&quot;"/>

        <Exec Command="xcopy &quot;$(SolutionDir)plugins&quot; &quot;$(TmpDir)plugins&quot; /q /s /y /i"/>

        <Exec Command="copy &quot;$(OutDir)$(AssemblyName).dll&quot; &quot;$(TmpDir)plugins\$(AssemblyName).dll&quot;"/>
        <Exec Command="copy &quot;$(OutDir)$(AssemblyName).pdb&quot; &quot;$(TmpDir)plugins\$(AssemblyName).pdb&quot;"/>
        <Exec Command="copy &quot;$(SolutionDir)src\ValheimRAFT\README.md&quot; &quot;$(TmpDir)README.md&quot;"/>

        <!-- Overrites the auto-doc -->
        <Copy Condition="Exists('$(AutoDocPath)') and Exists('$(LocalAutoDocPath)')" SourceFiles="$(AutoDocPath)" DestinationFolder="$(SolutionDir)src\$(AssemblyName)\docs\"/>

        <!-- Copy Assets -->
        <Exec Command="if exist &quot;$(AssetsDir)&quot; xcopy /d &quot;$(AssetsDir)&quot; &quot;$(TmpDir)plugins\Assets\&quot; /E/H"/>
        <Exec Command="if exist $&quot;$(AssetsDir)&quot; del &quot;$(TmpDir)plugins\Assets\*.png.meta&quot;"/>

        <!--   copy all files from outputdir, anything included is something that does not exist in the base game dependencies...this copies too many things, including dev only deps fyi. dont use it for production     -->
        <Exec Command="xcopy &quot;$(TargetDir)&quot; &quot;$(TmpDir)plugins\&quot; /q /s /y /i"/>

        <Exec Command="xcopy /d &quot;$(ThunderStoreDir)&quot; &quot;$(TmpDir)&quot; /E/H"/>
        <!-- delete duplicate mod version-->

        <Exec Command="if exist &quot;$(ModOutputDir)$(ThunderStoreName)-$(ModNameVersion)&quot; del /s /q &quot;$(ModOutputDir)$(ThunderStoreName)-$(ModNameVersion)&quot;"/>
        <Exec Command="if exist &quot;$(ModOutputDir)$(NexusName)-$(ModNameVersion)&quot; del /s /q &quot;$(ModOutputDir)$(NexusName)-$(ModNameVersion)&quot;"/>
        <Exec Command="if exist &quot;$(ModOutputDir)libs-$(ApplicationVersion).zip&quot; del /s /q &quot;$(ModOutputDir)libs-$(ApplicationVersion).zip&quot;"/>

        <Exec Command="powershell Compress-Archive '$(TmpDir)\*' '$(ModOutputDir)$(ThunderStoreName)-$(ModNameVersion)'"/>

        <!--  For modNexus there needs to be a folder with the modname     -->
        <Exec Command="xcopy /d &quot;$(TmpDir)plugins&quot; &quot;$(TmpDir)$(AssemblyName)&quot; /E/H"/>
        <Exec Command="powershell Compress-Archive '$(TmpDir)$(AssemblyName)' '$(ModOutputDir)$(NexusName)-$(ModNameVersion)'"/>
        <Exec Command="powershell Compress-Archive '$(SolutionDir)libs\*' '$(ModOutputDir)libs-$(ApplicationVersion).zip'"/>
    </Target>
    <!-- Copy to plugins folder and zip -->
    <!-- <Target Name="PostBuild" AfterTargets="PostBuildEvent">
        <ItemGroup>
            <AllFiles Include="$(TargetDir)**\*.*" Exclude="$(TargetDir)**\*.pdb"/>
        </ItemGroup>
        <Copy SourceFiles="@(AllFiles)" DestinationFolder=$(GamePath)\BepInEx\plugins\%(RecursiveDir)"/>
        <Delete Files="$(ProjectDir)\bin\$(TargetName).zip"/>
        <Copy SourceFiles="@(AllFiles)" DestinationFolder="$(TargetDir)..\Release\%(RecursiveDir)"/>
        <ZipDirectory SourceDirectory="$(TargetDir)..\Release" DestinationFile="$(ProjectDir)\bin\$(TargetName).zip"/>
        <RemoveDir Directories="$(TargetDir)..\Release"/>
    </Target> -->
    <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets"/>
</Project>